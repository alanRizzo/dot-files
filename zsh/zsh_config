# -------------------------------------------------------------------------------------------------
# Custom config
# -------------------------------------------------------------------------------------------------

# Set up fzf key bindings and fuzzy completion
source <(fzf --zsh)

eval "$(zoxide init zsh)"
# eval "$(starship init zsh)"
eval "$(uv generate-shell-completion zsh)"

# -------------------------------------------------------------------------------------------------
# Bat config
# -------------------------------------------------------------------------------------------------

export STARSHIP_CONFIG=~/.config/starship/starship.toml

# -------------------------------------------------------------------------------------------------
# Ptpython config
# -------------------------------------------------------------------------------------------------

export PTPYTHON_CONFIG_HOME=~/.config/ptpython/

# -------------------------------------------------------------------------------------------------
# Bat config
# -------------------------------------------------------------------------------------------------

export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# -------------------------------------------------------------------------------------------------
# Yazi config
# -------------------------------------------------------------------------------------------------

export EDITOR="nvim"

function y() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(command bat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# -------------------------------------------------------------------------------------------------
# Virtualenv config
# -------------------------------------------------------------------------------------------------

auto_python_venv() {
  local VENV_DIR="./.venv"
  local CURRENT_DIR="$PWD"
  local PREVIOUS_DIR="$AUTO_PYTHON_VENV_ROOT"

  is_not_child_or_same() {
    local parent=$(realpath "$1")
    local folder=$(realpath "$2")
    [[ "$folder" != "$parent" && "$folder" != "$parent"/* ]]
  }

  # Only act if directory changed
  if [[ "$CURRENT_DIR" != "$PREVIOUS_DIR" ]]; then
    # If virtualenv is active and we moved outside its project, deactivate
    if [[ -n "$VIRTUAL_ENV" ]] && is_not_child_or_same "$(dirname "$VIRTUAL_ENV")" "$CURRENT_DIR"; then

      deactivate
    fi

    # If no virtualenv is active and there's a .venv folder, activate it
    if [[ -d "$VENV_DIR" && -z $VIRTUAL_ENV ]]; then
      source "$VENV_DIR/bin/activate"
    fi
  fi

  # Update root directory
  export AUTO_PYTHON_VENV_ROOT="$CURRENT_DIR"
}

# Hook the function to be called when the directory changes
autoload -U add-zsh-hook
add-zsh-hook chpwd auto_python_venv

# Initialize AUTO_PYTHON_VENV_ROOT
export AUTO_PYTHON_VENV_ROOT="$PWD"

# -------------------------------------------------------------------------------------------------
# Alias
# -------------------------------------------------------------------------------------------------

alias fzf='fzf --preview "bat --color=always --style=numbers --line-range=:500 {}"'

alias h=hx
alias vim=nvim

alias yolo='git commit -m "$(curl -s https://whatthecommit.com/index.txt)"'
alias gl='git pull'
alias gd='git diff'
alias ga='git add'
alias gp='git push'
alias gst='git status'
alias gco='git checkout'
alias gcm='git checkout main'
alias gcmsg='git commit --message'
alias gpsup='git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)'
alias go='git-open'

# -------------------------------------------------------------------------------------------------
# Exports
# -------------------------------------------------------------------------------------------------

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$HOME/.local/bin:$PYENV_ROOT/bin:$PATH"
export PTPYTHON_CONFIG_HOME="$HOME/.config/ptpython/"
